" Setup Plug {{{
call plug#begin('~/.config/vim/plugged')
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'itchyny/lightline.vim'
Plug 'bronson/vim-trailing-whitespace'
Plug 'alvan/vim-closetag'
Plug 'jiangmiao/auto-pairs'
Plug 'christoomey/vim-sort-motion'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all', 'on': ['Files', 'Buffers', 'GFiles', 'Windows', 'Commits'] }
Plug 'junegunn/fzf.vim', { 'on': ['Files', 'Buffers', 'GFiles', 'Windows', 'Commits'] }
Plug 'chr4/nginx.vim'
Plug 'ap/vim-buftabline'
call plug#end()
" }}}

" System settings {{{
set nocompatible
set rtp+=~/.fzf
runtime! plugin/sensible.vim
scriptencoding utf-8
filetype indent on
filetype plugin on
set number
set hidden
set mouse=a
set ttyfast
set autoread
set hlsearch
set wildmenu
set incsearch
set showmatch
set smartcase
set ignorecase
set lazyredraw
set splitbelow
set splitright
set visualbell
set modelines=1
set scrolloff=3
set history=1000
set noerrorbells
set encoding=utf-8
set backupcopy=yes
set fillchars+=vert:┃
set viewoptions=options,cursor,unix,slash
set cursorline
"set colorcolumn=120

" listchars {{{
"set listchars=eol:$,tab:>-,trail:~,space:␣
set nolist
" }}}

set undofile " Persist undo info in <FILENAME>.un~
silent !mkdir ~/.vimundo >& /dev/null
set undodir=~/.vimundo"

" backups
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" Store temporary files in a central spot
let vimtmp = $HOME . '/.tmp/' . getpid()
silent! call mkdir(vimtmp, "p", 0700)
let &backupdir = vimtmp
let &directory = vimtmp

" https://sunaku.github.io/vim-256color-bce.html
if &term =~ '256color'
    " disable Background Color Erase (BCE) so that color schemes
    "   " render properly when inside 256-color tmux and GNU screen.
    set t_ut=
endif

" Remember cursor position between vim sessions
autocmd BufReadPost *
            \ if line("'\"") > 1 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif

set backspace=indent,eol,start     " backspace over everything in insert mode
set ruler
set showcmd
set noshowmode
set noswapfile
set laststatus=2

" Fix timeout problem
set ttimeoutlen=50  " Small delay for keycodes
augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=200
    au InsertLeave * set timeoutlen=1000
augroup END

set wrap
set formatoptions=qrn1
" Tabs
set autoindent
set smarttab
set expandtab
set shiftwidth=4
set shiftround
set softtabstop=4
set tabstop=4
set foldmethod=manual
set nofoldenable
set foldlevelstart=1
set foldnestmax=10
set wildignore+=*/.git/*,*/.svn/*,*/.hg/*

" set leaderkey to SPACE, because spacebar is easy to press
let mapleader = " "
let localmapleader=","

" AutoGroups
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
    autocmd BufEnter *.py setlocal tabstop=4
    autocmd BufEnter *.md setlocal ft=markdown
    autocmd FileType * normal zR
augroup END
" }}}

" Sysmtem mappings {{{
" nnoremap Q <nop>
" map q <nop>
inoremap <c-d> <esc>ddi

" fast <esc>
inoremap jk <esc>
inoremap kj <esc>

" forget arrow keys
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
inoremap <Up> <nop>
inoremap <Down> <nop>
inoremap <Left> <nop>
inoremap <Right> <nop>

noremap <silent> k gk
noremap <silent> j gj

noremap H ^
noremap L g_
noremap J 5j
noremap K 5k
" this is the best, let me tell you why
" how annoying is that everytime you want to do something in vim
" you have to do shift-; to get :, can't we just do ;?
" Plus what does ; do anyways??
" if you do have a plugin that needs ;, you can just wap the mapping
" nnoremap : ;
" give it a try and you will like it
nnoremap ; :
inoremap <c-f> <c-x><c-f>

" Align blocks of text and keep them selected
vmap < <gv
vmap > >gv

nnoremap <leader>b :Buffers<cr>
nnoremap <leader>c :Commits<cr>
nnoremap <leader>f :Files<cr>
nnoremap <leader>g :GFiles<cr>
nnoremap <leader>w :Windows<cr>
nnoremap <leader>h :nohlsearch<cr>
nnoremap <leader>l :call ToggleNumber()<cr>
nnoremap <leader>m :silent make\|redraw!\|cw<cr>
nnoremap <leader>1 :set number!<cr>
vmap <leader>y :w! /tmp/vimtmp<cr>
nmap <leader>p :r! cat /tmp/vimtmp<cr>

" Window Shortcuts {{{
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" }}}

" Tabs Shortcuts {{{
nnoremap th :tabfirst<CR>
nnoremap tj :tabnext<CR>
nnoremap tk :tabprev<CR>
nnoremap tl :tablast<CR>
nnoremap tt :tabedit<Space>
nnoremap tn :tabnext<Space>
nnoremap tm :tabm<Space>
nnoremap td :tabclose<CR>
" }}}
" }}}

" Theme {{{
syntax enable
colorscheme delek
colorscheme seoul256
colorscheme default
set background=light
" }}}

" Custom Functions {{{
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc
" }}}

" plug junegunn/vim-easy-align {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap <leader>a <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap <leader>a <Plug>(EasyAlign)
" }}}

" plug lightline {{{
let g:lightline = {
    \ 'colorscheme': 'default',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename', 'modified' ] ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'fileformat', 'filetype' ] ]
    \ }
    \ }
" }}}

" vim:foldmethod=marker:foldlevel=0
